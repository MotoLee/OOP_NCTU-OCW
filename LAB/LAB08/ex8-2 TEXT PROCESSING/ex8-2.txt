In computer science, functional programming is a programming paradigm that
treats computation as the evaluation of mathematical functions and
avoids state and mutable data. It emphasizes the application of functions, in contrast to
the imperative programming style, which emphasizes changes in state. Functional
programming has its roots in lambda calculus, a formal system developed in the 1930s to
investigate function definition, function application, and recursion. Many functional
programming languages can be viewed as elaborations on the lambda calculus.